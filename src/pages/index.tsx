import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";

import { api } from "~/utils/api";

const Home: NextPage = () => {
  const profileByName = api.profile.getProfileByName.useQuery({
    name: "kou12345",
  });
  // const likeTweet = api.like.likeTweet.useMutation();
  // likeTweet.mutate({ tweetId: "tweet0000000000000" });

  const likeCount = api.like.getLikeCount.useQuery({
    tweetId: "tweet0000000000000",
  });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <AuthShowcase />
        <br />

        <ProfileShowcase />

        <FollowShowcase />

        <FollowCountShowcase />

        <UnfollowShowcase />

        <div className="text-white">
          <p className="font-bold">profileByNameを表示</p>
          <p>{profileByName.data?.userId}</p>
          <p>{profileByName.data?.bio}</p>
        </div>
        <br />
        {/* <div className="text-white">
          <p className="font-bold">likeTweetを表示</p>
          <p>{likeTweet.data?.tweetId}</p>
        </div> */}
        {/* <br /> */}
        <div className="text-white">
          <p className="font-bold">likeCountを表示</p>
          <p>{likeCount.data}</p>
        </div>
        <br />
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

// ログイン中のユーザーのプロフィールを取得
const ProfileShowcase: React.FC = () => {
  const {
    data: profile,
    isLoading,
    isError,
  } = api.profile.getMyProfile.useQuery();

  if (isLoading) {
    return <p>Loading...</p>;
  }

  if (isError) {
    return <p>Error!</p>;
  }

  return (
    <div className="text-white">
      <h2 className="font-bold">Profile</h2>
      <p>userId: {profile?.userId}</p>
      <p>bio: {profile?.bio}</p>
      <p>cover_image_path: {profile?.cover_image_path}</p>
      <p>location: {profile?.location}</p>
      <p>websiteUrl: {profile?.websiteUrl}</p>
      <br />
    </div>
  );
};

// フォローする
const FollowShowcase: React.FC = () => {
  const follow = api.follow.followUser.useMutation();

  // ボタンを押したらフォローする
  const handleFollow = () => {
    follow.mutate({ targetUserName: "kou12345" });
  };

  return (
    <div>
      <button onClick={handleFollow} className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        フォローする
      </button>
      <br />
    </div>
  );
};

// フォローを解除する
const UnfollowShowcase: React.FC = () => {
  const unfollow = api.follow.unfollowUser.useMutation();

  // ボタンを押したらフォローを解除する
  const handleUnfollow = () => {
    unfollow.mutate({targetUserName: "kou12345"});
  }

  return (
    <div>
      <button onClick={handleUnfollow} className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        フォローを解除する
      </button>
    </div>
  )
}

// フォロー数を取得
const FollowCountShowcase: React.FC = () => {
  const followCount = api.follow.getFollowCount.useQuery({
    userName: "kou-tech",
  });

  return (
    <div className="text-white">
      <p className="font-bold">followCountを表示</p>
      <p>{followCount.data}</p>
      <br />
    </div>
  );
}

