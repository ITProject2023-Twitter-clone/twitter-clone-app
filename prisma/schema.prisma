// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("account_id")
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Profile {
    userId      String  @id @map("user_id")
    explanation String? @db.Text
    header_path String? @db.Text
    location    String  @db.VarChar(30)
    website     String  @db.VarChar(100)
    user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("profiles")
}

model Session {
    id           String   @id @default(cuid()) @map("session_id")
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String     @id @default(cuid()) @map("user_id")
    name          String?    @unique
    email         String?    @unique
    emailVerified DateTime?  @map("email_verified")
    image         String?    @map("image_path") @db.Text
    birhday       DateTime
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
    tweet         Tweet[]
    like          Like[]
    retweet       Retweet[]
    follow        Follow[]
    follower      Follower[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Tweet {
    tweetId       Int       @id @default(autoincrement()) @map("tweet_id")
    userId        String    @map("user_id")
    parentTweetId Int?      @map("parent_tweet_id")
    body          String    @db.VarChar(140)
    createdAt     DateTime  @default(now()) @map("created_at")
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    like          Like[]
    retweet       Retweet[]

    @@map("tweets")
}

model Like {
    userId    String   @map("user_id")
    tweetId   Int      @map("tweet_id")
    createdAt DateTime @default(now()) @map("created_at")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    tweet     Tweet    @relation(fields: [tweetId], references: [tweetId], onDelete: Cascade)

    @@id([userId, tweetId])
    @@map("likes")
}

model Retweet {
    userId    String   @map("user_id")
    tweetId   Int      @map("tweet_id")
    createdAt DateTime @default(now()) @map("created_at")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    tweet     Tweet    @relation(fields: [tweetId], references: [tweetId], onDelete: Cascade)

    @@id([userId, tweetId])
    @@map("retweets")
}

model Follow {
    followId String @id @default(cuid()) @map("follow_id")
    userId   String @map("user_id")
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("follows")
}

model Follower {
    followerId String @id @default(cuid()) @map("follower_id")
    userId     String @map("user_id")
    user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("followers")
}
