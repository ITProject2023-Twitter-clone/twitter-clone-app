// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("account_id")
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Profile {
    userId           String         @id @map("user_id")
    bio              String?        @db.VarChar(160)
    cover_image_path String?        @db.Text
    location         String?        @db.VarChar(30)
    websiteUrl       String?        @db.VarChar(100)
    user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    socialAccount    SocialAccount?

    @@map("profiles")
}

model SocialAccount {
    userId     String  @id @map("user_id")
    githubUrl  String? @db.Text
    qiitaUrl   String? @db.Text
    zennUrl    String? @db.Text
    twitterUrl String? @db.Text

    profile Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

    @@map("social_accounts")
}

model Session {
    id           String   @id @default(cuid()) @map("session_id")
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String     @id @default(cuid()) @map("user_id")
    name          String?    @unique // GitHub username
    email         String?    @unique
    emailVerified DateTime?  @map("email_verified")
    image         String?    @map("image_path") @db.Text
    displayName   String?    @map("display_name") @db.VarChar(30)
    birhday       DateTime?
    createdAt     DateTime   @default(now()) @map("created_at")
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
    draft         Draft[]
    tweet         Tweet[]
    like          Like[]
    retweet       Retweet[]
    follow        Follow?
    following     Follow[]   @relation("followingUser")
    Follower      Follower?
    FollowerUser  Follower[] @relation("followerUser")

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Draft {
    draftId    String       @id @map("draft_id")
    userId     String       @map("user_id")
    sentence   String       @db.VarChar(1000)
    createdAt  DateTime     @default(now()) @map("created_at")
    updatedAt  DateTime     @updatedAt @map("updated_at")
    user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    draftMedia DraftMedia[]

    @@map("drafts")
}

model DraftMedia {
    draftMediaId String @id @map("draft_media_id")
    draftId      String @map("draft_id")
    mediaPath    String @map("media_path")
    draft        Draft  @relation(fields: [draftId], references: [draftId], onDelete: Cascade)

    @@map("draft_media")
}

model Tweet {
    tweetId         String         @id @map("tweet_id") // アプリケーション側でULIDを生成する
    userId          String         @map("user_id")
    tweetCategoryId Int            @map("tweet_category_id")
    sentence        String         @db.VarChar(1000)
    isArchive       Boolean        @default(false) @map("is_archive")
    archiveAt       DateTime?      @map("archive_at")
    isDeleted       Boolean        @default(false) @map("is_deleted")
    DeletedAt       DateTime?      @map("deleted_at")
    createdAt       DateTime       @default(now()) @map("created_at")
    updatedAt       DateTime       @updatedAt @map("updated_at")
    user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    TweetTag        TweetTag[]
    tweetMedia      TweetMedia[]
    tweetCategory   TweetCategory  @relation(fields: [tweetCategoryId], references: [tweetCategoryId], onDelete: Cascade)
    quoteRetweet    QuoteRetweet?
    quoteTweet      QuoteRetweet[] @relation("quoteTweet")
    like            Like[]
    retweet         Retweet[]
    ancentor        TreePath[]     @relation("ancentor")
    descendant      TreePath[]     @relation("descendant")

    @@map("tweets")
}

model Tag {
    tagId    String     @id @default(cuid()) @map("tag_id")
    tagName  String     @unique @map("tag_name")
    TweetTag TweetTag[]

    @@map("tags")
}

model TweetTag {
    tweetId String @map("tweet_id")
    tagId   String @map("tag_id")
    tweet   Tweet  @relation(fields: [tweetId], references: [tweetId], onDelete: Cascade)
    tag     Tag    @relation(fields: [tagId], references: [tagId], onDelete: Cascade)

    @@id([tweetId, tagId])
    @@map("tweet_tags")
}

model TweetMedia {
    mediaId   String @id @map("media_id")
    tweetId   String @map("tweet_id")
    mediaPath String @map("media_path")
    tweet     Tweet  @relation(fields: [tweetId], references: [tweetId], onDelete: Cascade)

    @@map("tweet_media")
}

model TreePath {
    ancentorId   String @map("ancentor_id")
    descendantId String @map("descendant_id")
    ancentor     Tweet  @relation("ancentor", fields: [ancentorId], references: [tweetId], onDelete: Cascade)
    descendant   Tweet  @relation("descendant", fields: [descendantId], references: [tweetId], onDelete: Cascade)

    @@id([ancentorId, descendantId])
    @@map("tree_paths")
}

model TweetCategory {
    tweetCategoryId Int     @id @default(autoincrement()) @map("tweet_category_id")
    tweetCategory   String  @unique @map("tweet_category")
    tweet           Tweet[]

    @@map("tweet_categories")
}

model QuoteRetweet {
    tweetId      String @unique @map("tweet_id")
    quoteTweetId String @map("quote_tweet_id")
    tweet        Tweet  @relation(fields: [tweetId], references: [tweetId], onDelete: Cascade)
    quoteTweet   Tweet  @relation("quoteTweet", fields: [quoteTweetId], references: [tweetId], onDelete: Cascade)

    @@id([tweetId, quoteTweetId])
    @@map("quote_retweets")
}

model Like {
    userId    String   @map("user_id")
    tweetId   String   @map("tweet_id")
    createdAt DateTime @default(now()) @map("created_at")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    tweet     Tweet    @relation(fields: [tweetId], references: [tweetId], onDelete: Cascade)

    @@id([userId, tweetId])
    @@unique([userId, tweetId])
    @@map("likes")
}

model Retweet {
    userId    String   @map("user_id")
    tweetId   String   @map("tweet_id")
    createdAt DateTime @default(now()) @map("created_at")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    tweet     Tweet    @relation(fields: [tweetId], references: [tweetId], onDelete: Cascade)

    @@id([userId, tweetId])
    @@map("retweets")
}

model Follow {
    followId        Int    @id @default(autoincrement()) @map("follow_id")
    userId          String @unique @map("user_id")
    followingUserId String @map("following_user_id")
    user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    followingUser   User   @relation("followingUser", fields: [followingUserId], references: [id], onDelete: Cascade)

    @@map("follows")
}

model Follower {
    followerId     Int    @id @default(autoincrement()) @map("follower_id")
    userId         String @unique @map("user_id")
    followerUserId String @map("follower_user_id")
    user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    followerUser   User   @relation("followerUser", fields: [followerUserId], references: [id], onDelete: Cascade)

    @@map("followers")
}
